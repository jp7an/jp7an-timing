generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RaceType {
  NORMAL
  BACKYARD
  LAP
  TIMERACE
}

model Event {
  id              String    @id @default(cuid())
  slug            String    @unique
  name            String
  city            String
  date            DateTime
  organizer       String
  distanceMeters  Int?
  raceType        RaceType
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  sfa_type               String?
  sfa_courseMeasurer     String?
  sfa_dateOfMeasurement  DateTime?

  normalConfig    NormalConfig?
  backyardConfig  BackyardConfig?
  lapConfig       LapConfig?
  timeRaceConfig  TimeRaceConfig?

  minLapTimeSec   Int      @default(10)
  antiDupSec      Int      @default(2)
  gateToFinishSec Int      @default(300)

  state           EventState @default(DRAFT)

  participants    Participant[]
  reads           TagRead[]
  laps            Lap[]
  results         Result[]
  logs            AuditLog[]
  classes         Class[]
}

enum EventState {
  DRAFT
  READY
  RUNNING
  PAUSED
  FINISHED
}

model NormalConfig {
  id        String @id @default(cuid())
  eventId   String @unique
  event     Event  @relation(fields: [eventId], references: [id])
  gunAt     DateTime?
  forceFinishNow  Boolean @default(false)
}

model BackyardConfig {
  id        String @id @default(cuid())
  eventId   String @unique
  event     Event  @relation(fields: [eventId], references: [id])

  loopLengthMeters Int     @default(6706)
  loopTimeSec      Int     @default(3600)
  startAt          DateTime?
  currentLoop      Int     @default(0)
}

model LapConfig {
  id        String @id @default(cuid())
  eventId   String @unique
  event     Event  @relation(fields: [eventId], references: [id])

  lapLengthMeters Int
  totalLaps       Int
  gunAt           DateTime?
}

model TimeRaceConfig {
  id        String @id @default(cuid())
  eventId   String @unique
  event     Event  @relation(fields: [eventId], references: [id])

  lapLengthMeters Int
  durationSec     Int
  gunAt           DateTime?
  endsAt          DateTime?
}

model Participant {
  id            String   @id @default(cuid())
  eventId       String
  event         Event    @relation(fields: [eventId], references: [id])
  bib           Int?     @unique
  epc           String?  @unique
  firstname     String
  lastname      String
  gender        String    // "M" | "K"
  birthday      DateTime? // sparas men exportkolumn R l√§mnas tom
  nationality   String    // ISO3 (default SWE)
  club          String?
  email         String?

  status        ParticipantStatus @default(REGISTERED)
  extraMeters   Int      @default(0)

  registration  Registration?
  results       Result[]
  laps          Lap[]
}

enum ParticipantStatus {
  REGISTERED
  PAID_PENDING_REVIEW
  APPROVED
  WITHDRAWN
  DQ
  FINISHED
}

model Registration {
  id            String   @id @default(cuid())
  participantId String   @unique
  participant   Participant @relation(fields: [participantId], references: [id])
  createdAt     DateTime @default(now())
  paymentRef    String?
  amountSEK     Int?
  paid          Boolean  @default(false)
}

model TagRead {
  id         String   @id @default(cuid())
  eventId    String
  event      Event    @relation(fields: [eventId], references: [id])
  epc        String
  antenna    Int?
  rssi       Float?
  seenAt     DateTime
  processed  Boolean  @default(false)
}

model Lap {
  id            String   @id @default(cuid())
  eventId       String
  event         Event    @relation(fields: [eventId], references: [id])
  participantId String
  participant   Participant @relation(fields: [participantId], references: [id])
  index         Int
  passedAt      DateTime
  lapTimeMs     Int
  valid         Boolean  @default(true)
  source        String?  // "auto" | "manual"
}

model Result {
  id            String   @id @default(cuid())
  eventId       String
  event         Event    @relation(fields: [eventId], references: [id])
  participantId String
  participant   Participant @relation(fields: [participantId], references: [id])

  gunTimeMs     Int?
  chipTimeMs    Int?
  totalLaps     Int      @default(0)
  totalMeters   Int      @default(0)
  avgPaceSecPerKm Int?
  lastLapMs     Int?
  placing       Int?
  classPlacing  Int?
}

model AuditLog {
  id        String   @id @default(cuid())
  eventId   String?
  actor     String?
  action    String
  payload   Json?
  createdAt DateTime @default(now())
  event     Event?   @relation(fields: [eventId], references: [id])
}

model Class {
  id          String   @id @default(cuid())
  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])
  name        String
  type        String   // "distance" | "laps" | "time" | "other"
  value       Int?     // meters for distance, number for laps, seconds for time
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}